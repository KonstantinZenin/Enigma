========================
CODE SNIPPETS
========================
TITLE: Install FullCalendar Core and DayGrid Plugin via npm
DESCRIPTION: This command installs the core FullCalendar library and the DayGrid plugin using npm. The `--save` flag ensures that these packages are added to the project's `dependencies` in `package.json`, making them part of the project's required modules.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/intro/getting-started.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/daygrid
```

----------------------------------------

TITLE: Install FullCalendar Dependencies (npm)
DESCRIPTION: Command to install the core and dayGrid FullCalendar packages using npm for an ES6 build environment. This is the first step when setting up FullCalendar in a modern JavaScript project.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_1

LANGUAGE: shell
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/daygrid
```

----------------------------------------

TITLE: Initialize FullCalendar with Basic Configuration and Events
DESCRIPTION: This snippet demonstrates the basic setup of FullCalendar. It waits for the DOM to be fully loaded, gets a reference to the calendar element, and then instantiates a new FullCalendar.Calendar object. The configuration includes setting the initial view, date, header toolbar layout, and a predefined list of events with various properties like title, start, end, and URL. Finally, it renders the calendar.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/intro/initialize-globals-demo.html#_snippet_0

LANGUAGE: javascript
CODE:
```
{% assign ym = site.time | date: '%Y-%m' %}
document.addEventListener('DOMContentLoaded', function() {
  var calendarEl = document.getElementById('calendar');

  var calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: 'dayGridMonth',
    initialDate: '{{ ym }}-07',
    headerToolbar: {
      left: 'prev,next today',
      center: 'title',
      right: 'dayGridMonth,timeGridWeek,timeGridDay'
    },
    events: [
      { title: 'All Day Event', start: '{{ ym }}-01' },
      { title: 'Long Event', start: '{{ ym }}-07', end: '{{ ym }}-10' },
      { groupId: '999', title: 'Repeating Event', start: '{{ ym }}-09T16:00:00' },
      { groupId: '999', title: 'Repeating Event', start: '{{ ym }}-16T16:00:00' },
      { title: 'Conference', start: '{{ ym }}-11', end: '{{ ym }}-13' },
      { title: 'Meeting', start: '{{ ym }}-12T10:30:00', end: '{{ ym }}-12T12:30:00' },
      { title: 'Lunch', start: '{{ ym }}-12T12:00:00' },
      { title: 'Meeting', start: '{{ ym }}-12T14:30:00' },
      { title: 'Birthday Party', start: '{{ ym }}-13T07:00:00' },
      { title: 'Click for Google', url: 'https://google.com/', start: '{{ ym }}-28' }
    ]
  });

  calendar.render();
});
```

----------------------------------------

TITLE: Handle FullCalendar eventResize Callback
DESCRIPTION: Demonstrates the updated `eventResize` callback signature, which now receives a single `info` object. This example shows how to access the current event, its state before resizing, the start and end deltas, and how to revert the resize operation.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_68

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  eventResize: function(info) {
    console.log(info.event);
    console.log(info.prevEvent); // data before the drop
    console.log(info.startDelta); // how far start was moved
    console.log(info.endDelta); // how far end was moved
    console.log(info.jsEvent);

    if (confirm('revert change?')) {
      info.revert();
    }
  }
})
```

----------------------------------------

TITLE: Install FullCalendar Core and DayGrid via npm
DESCRIPTION: This command installs the core FullCalendar library and the DayGrid plugin using npm, saving them as dependencies in your project. This is the standard way to get FullCalendar v5 code, similar to previous versions.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/upgrading-from-v4.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/daygrid
```

----------------------------------------

TITLE: Install FullCalendar Scheduler Plugins via NPM
DESCRIPTION: This shell command uses npm to install the core FullCalendar package along with the `resource-timeline` premium plugin. This is the recommended way to get started with FullCalendar Scheduler using package managers.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/premium.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/resource-timeline
```

----------------------------------------

TITLE: Install FullCalendar Luxon Plugin via NPM
DESCRIPTION: Instructions to install the FullCalendar Luxon plugin along with core and daygrid packages using npm. This setup is for projects using a module bundler. Note: Use `@fullcalendar/luxon2` for Luxon v2.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/date-library/luxon.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save \
  @fullcalendar/luxon3 \
  @fullcalendar/core \
  @fullcalendar/daygrid
```

----------------------------------------

TITLE: FullCalendar Event-Fetching Function New Signature Example
DESCRIPTION: Provides a practical JavaScript example demonstrating the usage of the updated event-fetching function signature within a FullCalendar instance. It shows how to access properties from the `fetchInfo` object and call `successCallback`.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_45

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  events: function(fetchInfo, successCallback, failureCallback) {
    console.log(fetchInfo.startStr); // '2018-08-26T00:00:00-05:00'
    console.log(fetchInfo.endStr); // '2018-10-07T00:00:00-05:00'
    console.log(fetchInfo.timeZone); // 'local'
    successCallback([]);
  }
})
```

----------------------------------------

TITLE: Include FullCalendar CSS for ES6 Setup
DESCRIPTION: Specifies the necessary CSS file paths for FullCalendar core and dayGrid plugins when using an ES6 module setup. These stylesheets must be manually linked in the HTML.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_3

LANGUAGE: html
CODE:
```
<link href='node_modules/@fullcalendar/core/main.css' rel='stylesheet' />
<link href='node_modules/@fullcalendar/daygrid/main.css' rel='stylesheet' />
```

----------------------------------------

TITLE: Initialize FullCalendar with Luxon Plugin (Script Tags)
DESCRIPTION: Example of including Luxon and FullCalendar via CDN script tags and initializing the calendar. This setup also demonstrates applying a Luxon format string to the calendar's title.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/date-library/luxon1.md#_snippet_2

LANGUAGE: html
CODE:
```
<!-- luxon lib -->
<script src='https://cdn.jsdelivr.net/npm/luxon@1.24.1/build/global/luxon.min.js'></script>

<!-- fullcalendar bundle -->
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@{{ site.data.latest-releases.v5 }}/main.min.js'></script>

<!-- the luxon-to-fullcalendar connector. must go AFTER the luxon lib -->
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/luxon@{{ site.data.latest-releases.v5 }}/main.global.min.js'></script>

<script>
  var calendar = document.getElementById('calendar')
  var calendar = new FullCalendar.Calendar(calendarEl, {
    titleFormat: 'LLLL d, yyyy' // you can now use Luxon format strings!
  })

  calendar.render()
</script>
```

----------------------------------------

TITLE: Initialize FullCalendar with Luxon 2 Plugin (NPM)
DESCRIPTION: This JavaScript example demonstrates how to import and register the Luxon 2 plugin within a FullCalendar instance when using an NPM-based setup. It shows how to apply Luxon formatting strings directly to FullCalendar settings like `titleFormat`.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/date-library/luxon2.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { Calendar } from '@fullcalendar/core'
import luxon2Plugin from '@fullcalendar/luxon2'
import dayGridPlugin from '@fullcalendar/daygrid'

let calendar = document.getElementById('calendar')
let calendar = new Calendar(calendarEl, {
  plugins: [ luxon2Plugin, dayGridPlugin ],
  titleFormat: 'LLLL d, yyyy' // you can now use Luxon format strings!
})

calendar.render()
```

----------------------------------------

TITLE: Install FullCalendar Resource Packages with npm
DESCRIPTION: Shows how to install FullCalendar resource-related packages using `npm`. It highlights that `@fullcalendar/resource` is now a peer dependency and must be explicitly installed when using any resource-related plugins.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/upgrading-from-v5.md#_snippet_2

LANGUAGE: sh
CODE:
```
npm install \
  @fullcalendar/core \
  @fullcalendar/resource \  # always install when using resources!\
  @fullcalendar/resource-timeline  # a plugin that uses resources
```

----------------------------------------

TITLE: Install FullCalendar Core and Resource Timeline Plugin via npm
DESCRIPTION: Installs the necessary npm packages for FullCalendar core and the resource timeline plugin, which are required for an ES6 setup to utilize the Timeline View.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/timeline-view/timeline-view.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/resource-timeline
```

----------------------------------------

TITLE: Install FullCalendar List Plugin via npm
DESCRIPTION: Instructions for installing the core FullCalendar package and the list plugin using npm, which is required for ES6 setups to use the list view functionality.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/list-view/list-view.md#_snippet_0

LANGUAGE: npm
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/list
```

----------------------------------------

TITLE: iCalendar: Install ical.js Peer Dependency
DESCRIPTION: Users of the `@fullcalendar/icalendar` package must now manually install `ical.js` as it has been converted to a peer dependency.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/upgrading-from-v5.md#_snippet_13

LANGUAGE: Shell
CODE:
```
npm install @fullcalendar/icalendar ical.js
```

----------------------------------------

TITLE: Install FullCalendar Core and Standard Plugins via NPM
DESCRIPTION: This command installs the core FullCalendar package along with common plugins like dayGrid, timeGrid, and list, which provide different calendar views. These are essential for displaying calendar functionality.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/intro/initialize-es6.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @fullcalendar/core @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/list
```

----------------------------------------

TITLE: FullCalendar: Get Events by Filtering
DESCRIPTION: Example demonstrating how to retrieve a subset of events from the calendar by filtering the array returned by `calendar.getEvents()`, replacing the deprecated `clientEvents` method.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_36

LANGUAGE: js
CODE:
```
var someEvents = calendar.getEvents().filter(function(event) {
  return event.title === 'My Event';
});
```

----------------------------------------

TITLE: Install FullCalendar Core and Standard Plugins via NPM
DESCRIPTION: Use NPM or Yarn to install the FullCalendar core package along with common plugins like dayGrid, timeGrid, and list.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/intro/initialize-es6.md#_snippet_0

LANGUAGE: npm
CODE:
```
npm install \
  @fullcalendar/core \
  @fullcalendar/daygrid \
  @fullcalendar/timegrid \
  @fullcalendar/list
```

----------------------------------------

TITLE: Install FullCalendar Core and React Connector with npm
DESCRIPTION: Illustrates the required `npm install` command for FullCalendar V6, emphasizing that `@fullcalendar/core` is now a mandatory peer dependency for all connectors like React, Angular, and Vue, alongside any additional plugins.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/upgrading-from-v5.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install \
  @fullcalendar/core \   # always install core!\
  @fullcalendar/react \  # the connector (react/angular/vue)\
  @fullcalendar/daygrid  # any additional plugins
```

----------------------------------------

TITLE: Install Multiple FullCalendar Plugins via NPM
DESCRIPTION: Command to install multiple FullCalendar plugins (dayGrid, timeGrid, list) along with the core package using npm. This allows for modular inclusion of features.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/intro/initialize-es6.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm install @fullcalendar/core @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/list
```

----------------------------------------

TITLE: FullCalendar Docs Development CLI Commands
DESCRIPTION: These commands are used for managing the FullCalendar documentation project. `npm install` fetches all necessary dependencies, `npm run dev` starts a local development server with live reloading, and `npm run build` compiles the project into the `_site` directory for deployment.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install

# watch & serve while developing
npm run dev

# build into _site directory
npm run build
```

----------------------------------------

TITLE: Install FullCalendar Luxon Plugin via NPM
DESCRIPTION: This snippet provides the command to install the FullCalendar Luxon plugin along with core and daygrid packages using npm. It's the first step for setting up the plugin in a modern JavaScript project.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/date-library/luxon1.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save \
  @fullcalendar/luxon \
  @fullcalendar/core \
  @fullcalendar/daygrid
```

----------------------------------------

TITLE: Calling FullCalendar Methods
DESCRIPTION: Demonstrates the new way to call methods on a FullCalendar instance, replacing the older jQuery-based approach.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_4

LANGUAGE: javascript
CODE:
```
calendar.next();
```

----------------------------------------

TITLE: Install FullCalendar Core and Premium Plugins via NPM
DESCRIPTION: This command installs the core FullCalendar package along with a specific premium plugin, `resource-timeline`. Premium plugins often require a license and provide advanced functionalities like resource scheduling.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/intro/initialize-es6.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/resource-timeline
```

----------------------------------------

TITLE: Install FullCalendar Premium Plugins via NPM
DESCRIPTION: Install the FullCalendar core, resource, and specific premium plugins like resource-timeline using NPM for advanced scheduling features.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/intro/initialize-es6.md#_snippet_2

LANGUAGE: npm
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/resource \
  @fullcalendar/resource-timeline
```

----------------------------------------

TITLE: New Method: batchRendering
DESCRIPTION: Introduces the new `batchRendering` method, designed to optimize rendering by grouping multiple operations.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
Calendar.batchRendering() method:
  - New method.
  - Purpose: Will group operations and consolidate them into a single rerender.
```

----------------------------------------

TITLE: Install FullCalendar Multi-Month Plugin via npm
DESCRIPTION: Instructions to install the necessary FullCalendar core and multi-month packages using npm for a project.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/multimonth-view/multimonth-stack.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/multimonth
```

----------------------------------------

TITLE: Initialize FullCalendar with Google Calendar Plugin
DESCRIPTION: Provides examples for initializing FullCalendar to display Google Calendar events. This includes setups for both ES6 build systems, requiring explicit plugin imports, and global bundle usage, where the plugin is automatically available.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/event-source/google-calendar.md#_snippet_0

LANGUAGE: js
CODE:
```
import { Calendar } from '@fullcalendar/core';
import googleCalendarPlugin from '@fullcalendar/google-calendar';
...
let calendar = new Calendar(calendarEl, {
  plugins: [ googleCalendarPlugin ]
});
```

LANGUAGE: html
CODE:
```
<link href='fullcalendar/main.css' rel='stylesheet' />
<script src='fullcalendar/main.js'></script>
<script>
...
var calendar = new FullCalendar.Calendar(calendarEl, {
  // no plugin config required!
});
...
</script>
```

----------------------------------------

TITLE: Install FullCalendar via NPM
DESCRIPTION: This command installs FullCalendar, jQuery, and Moment.js as NPM packages. This method is typically used when integrating FullCalendar into projects that utilize a build system like Webpack or Browserify.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v3/intro/installation.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install jquery moment fullcalendar
```

----------------------------------------

TITLE: Link FullCalendar DayGrid Stylesheets for ES6 Setup
DESCRIPTION: This HTML snippet shows the necessary <link> tags to include the core FullCalendar and DayGrid plugin stylesheets when using an ES6 module setup. These paths typically point to files within the 'node_modules' directory after installation via npm or yarn.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/daygrid-view/daygrid-view.md#_snippet_1

LANGUAGE: html
CODE:
```
<link href='node_modules/@fullcalendar/core/main.css' rel='stylesheet' />
<link href='node_modules/@fullcalendar/daygrid/main.css' rel='stylesheet' />
```

----------------------------------------

TITLE: Install FullCalendar Core and DayGrid Plugin via NPM
DESCRIPTION: Command to install the core FullCalendar package and the DayGrid plugin using npm. The '--save' flag adds them to the project's dependencies in package.json.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/intro/initialize-es6.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/daygrid
```

----------------------------------------

TITLE: Install FullCalendar Luxon Plugin via NPM
DESCRIPTION: Instructions to install the FullCalendar Luxon plugin along with core FullCalendar packages and a specific view (DayGrid) using npm.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/date-library/luxon1.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save @fullcalendar/luxon @fullcalendar/core@5 @fullcalendar/daygrid
```

----------------------------------------

TITLE: Install FullCalendar Core and DayGrid Packages
DESCRIPTION: Installs the necessary FullCalendar core and dayGrid packages using npm, which are required to use the Month view in a JavaScript project.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/month-view/month-view.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/daygrid
```

----------------------------------------

TITLE: Install FullCalendar React Dependencies
DESCRIPTION: Instructions to install the FullCalendar React adapter and necessary plugins like DayGrid using npm.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/third-party/react.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save @fullcalendar/react @fullcalendar/daygrid
```

----------------------------------------

TITLE: Initialize FullCalendar with Script Tags (Browser Globals)
DESCRIPTION: Demonstrates how to include FullCalendar via script tags and initialize a basic calendar instance using browser globals, specifying plugins and a default view. This method is suitable for environments without a build system.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_0

LANGUAGE: html
CODE:
```
<link href='fullcalendar/core/main.css' rel='stylesheet' />
<link href='fullcalendar/daygrid/main.css' rel='stylesheet' />

<script src='fullcalendar/core/main.js'></script>
<script src='fullcalendar/daygrid/main.js'></script>
<script>

  document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar');

    var calendar = new FullCalendar.Calendar(calendarEl, {
      plugins: [ 'dayGrid' ],
      defaultView: 'dayGridMonth'
    });

    calendar.render();
  });

</script>
```

----------------------------------------

TITLE: Install FullCalendar Adaptive Plugin with npm
DESCRIPTION: This command installs the `@fullcalendar/adaptive` premium plugin using npm. This plugin is essential for enabling print optimization features in FullCalendar.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/print/print.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save @fullcalendar/adaptive
```

----------------------------------------

TITLE: Install FullCalendar Timeline View Packages
DESCRIPTION: Instructions for installing the necessary FullCalendar core and resource-timeline packages using npm, a package manager for JavaScript.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/timeline-view/timeline-view.md#_snippet_0

LANGUAGE: npm
CODE:
```
npm install --save @fullcalendar/core @fullcalendar/resource-timeline
```

----------------------------------------

TITLE: FullCalendar JavaScript Example: Get Events by Resource
DESCRIPTION: This JavaScript example demonstrates how to initialize a FullCalendar instance with resources and events, then retrieve events associated with a specific resource using `getResourceById()` and `getEvents()`. It shows how to access and process the event data by mapping event titles.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/resource-data/Resource-getEvents.md#_snippet_1

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  resources: [
    { id: 'a', title: 'Resource A' },
    { id: 'b', title: 'Resource B' }
  ],
  events: [
    { title: 'Event 1', start: '2020-06-01', resourceId: 'a' },
    { title: 'Event 2', start: '2020-06-01', resourceId: 'a' },
    { title: 'Event 3', start: '2020-06-01', resourceId: 'b' }
  ]
});

var resourceA = calendar.getResourceById('a');
var events = resourceA.getEvents();
var eventTitles = events.map(function(event) { return event.title });

console.log(eventTitles); // [ 'Event 1', 'Event 2' ]
```

----------------------------------------

TITLE: FullCalendar v5 Pre-built Bundle Usage (HTML)
DESCRIPTION: Illustrates how to use FullCalendar v5 with pre-built bundles via manual <script> and <link> tags, avoiding a build system. It shows the inclusion of the main CSS and JS files and basic calendar initialization, noting that the 'plugins' array is no longer needed.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/upgrading-from-v4.md#_snippet_2

LANGUAGE: html
CODE:
```
<link ref='fullcalendar/main.css' rel='stylesheet' />
<script src='fullcalendar/main.js'></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar')
    var calendar = new FullCalendar.Calendar(calendarEl, {
      // plugins: [ 'dayGrid' ] // DON'T DO THIS ANYMORE!
    })
    calendar.render()
  })
</script>
```

----------------------------------------

TITLE: Getting FullCalendar Options
DESCRIPTION: Shows the updated method for retrieving an option's value from a FullCalendar instance, replacing the deprecated jQuery-based `option` method.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_6

LANGUAGE: javascript
CODE:
```
var optionValue = calendar.getOption('optionName');
```

----------------------------------------

TITLE: Install FullCalendar Adaptive Plugin via npm
DESCRIPTION: Install the `@fullcalendar/adaptive` premium plugin using npm, which is a prerequisite for enabling print optimization features in FullCalendar.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/print/print.md#_snippet_0

LANGUAGE: npm
CODE:
```
npm install --save @fullcalendar/adaptive
```

----------------------------------------

TITLE: Install FullCalendar Multi-Month Plugin via npm
DESCRIPTION: Instructions to install the core FullCalendar package and the Multi-Month plugin using the npm package manager. This command adds the necessary dependencies to your project.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/multimonth-view/multimonth-grid.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/multimonth
```

----------------------------------------

TITLE: JavaScript Example: Get Resources for an Event
DESCRIPTION: Demonstrates how to initialize a FullCalendar instance with resources and events, then retrieve the resources associated with a specific event using `getEventById` and `getResources`.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/event-model/Event-getResources.md#_snippet_1

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  resources: [
    { id: 'a', title: 'Resource A' },
    { id: 'b', title: 'Resource B' }
  ],
  events: [
    { id: '1', title: 'Event 1', start: '2020-06-01', resourceId: 'a' }
  ]
});

var event = calendar.getEventById('1');
var resources = event.getResources();
var resourceIds = resources.map(function(resource) { return resource.id });

console.log(resourceIds); // [ 'a' ]
```

----------------------------------------

TITLE: Example: Format Date with Calendar::formatDate in JavaScript
DESCRIPTION: Demonstrates how to use the `calendar.formatDate` method within a FullCalendar setup. This example initializes a calendar with specific plugins, locale, and timezone, then formats a date string using custom options and logs the result to the console.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/date-library/Calendar-formatDate.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Calendar } from '@fullcalendar/core';
import dayGridPlugin from '@fullcalendar/daygrid';

document.addEventListener('DOMContentLoaded', function() {
  var calendarEl = document.getElementById('calendar');

  var calendar = new Calendar(calendarEl, {
    plugins: [ dayGridPlugin ],
    timeZone: 'UTC',
    locale: 'es'
  });

  var str = calendar.formatDate('2018-09-01', {
    month: 'long',
    year: 'numeric',
    day: 'numeric'
  });

  console.log(str); // "1 de septiembre de 2018 0:00 UTC"
});
```

----------------------------------------

TITLE: FullCalendar Package Manager Support Changes
DESCRIPTION: Updates regarding support for various package managers, noting dropped support for Bower and Composer.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_96

LANGUAGE: APIDOC
CODE:
```
FullCalendar Package Manager Support:
  NPM (and Yarn): Strong support.
  Bower: Support dropped.
  Composer: Support dropped. (More info: https://github.com/fullcalendar/fullcalendar/issues/4489)
```

----------------------------------------

TITLE: JavaScript Example: Retrieve Child Resources in FullCalendar
DESCRIPTION: This JavaScript example demonstrates how to set up a FullCalendar instance with nested resources and then use the `getChildren()` method to retrieve the child resources of a specific parent resource. It shows how to initialize resources, get a parent resource by ID, and then map the children to their IDs for logging.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/resource-data/Resource-getChildren.md#_snippet_1

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  resources: [
    { id: 'a', title: 'Resource A', children: [
      { id: 'a1', title: 'Resource A1' },
      { id: 'a2', title: 'Resource A2' }
    ] }
  ]
});

var parentResource = calendar.getResourceById('a');
var children = parentResource.getChildren();
var childIds = children.map(function(child) { return child.id });

console.log(childIds); // [ 'a1', 'a2' ]
```

----------------------------------------

TITLE: Install FullCalendar DayGrid Plugin via npm
DESCRIPTION: This command demonstrates how to install the core FullCalendar library and the DayGrid plugin using npm. The `--save` flag ensures these packages are added as dependencies to your project's `package.json` file.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/daygrid-view/daygrid-view.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/daygrid
```

----------------------------------------

TITLE: Install FullCalendar Web Component via NPM
DESCRIPTION: Instructions to install the core FullCalendar package, the web-component package, and any desired plugins using npm. This is the recommended way for modern JavaScript projects.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/third-party/web-component.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/web-component \
  @fullcalendar/daygrid
```

----------------------------------------

TITLE: Initialize FullCalendar and Access Event Object Properties
DESCRIPTION: This JavaScript snippet demonstrates how to initialize a FullCalendar instance with a predefined event. It then shows how to retrieve a specific event object using its ID via `getEventById` and access one of its properties, `start`, which is a Date object. The example concludes by converting the `start` date to an ISO string for display.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/event-model/event-object.md#_snippet_0

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  timeZone: 'UTC',
  events: [
    {
      id: 'a',
      title: 'my event',
      start: '2018-09-01'
    }
  ]
})

var event = calendar.getEventById('a') // an event object!
var start = event.start // a property (a Date object)
console.log(start.toISOString()) // "2018-09-01T00:00:00.000Z"
```

----------------------------------------

TITLE: FullCalendar: Define validRange with fixed start and end dates
DESCRIPTION: This snippet demonstrates how to configure the `validRange` property in FullCalendar using a static object. It shows examples for both a discrete range with explicit `start` and `end` dates, and an open-ended range where only the `start` date is specified, effectively allowing navigation indefinitely into the future from that point.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/date-navigation/validRange.md#_snippet_0

LANGUAGE: js
CODE:
```
// constrain to a discrete range
var calendar = new Calendar(calendarEl, {
  defaultView: 'dayGridMonth',
  validRange: {
    start: '2017-05-01',
    end: '2017-06-01'
  }
});

// constrain to an open-ended range
var calendar = new Calendar(calendarEl, {
  defaultView: 'dayGridMonth',
  validRange: {
    start: '2017-05-01'
  }
});
```

----------------------------------------

TITLE: FullCalendar eventDrop Callback Example
DESCRIPTION: Demonstrates how to implement the `eventDrop` callback within a FullCalendar instance. This example shows how to access the dropped event's title and start date, and how to conditionally revert the drop based on user confirmation.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/event-dragging-resizing/eventDrop.md#_snippet_1

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {

  events: [
    // events here
  ],

  editable: true,

  eventDrop: function(info) {
    alert(info.event.title + " was dropped on " + info.event.start.toISOString());

    if (!confirm("Are you sure about this change?")) {
      info.revert();
    }
  }

});
```

----------------------------------------

TITLE: Set FullCalendar validRange with fixed start and end dates
DESCRIPTION: This JavaScript example demonstrates how to configure the `validRange` property in FullCalendar using an object with `start` and `end` date strings. It shows both a discrete range and an open-ended range by omitting the `end` property.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/date-navigation/validRange.md#_snippet_0

LANGUAGE: js
CODE:
```
// constrain to a discrete range
var calendar = new Calendar(calendarEl, {
  initialView: 'dayGridMonth',
  validRange: {
    start: '2017-05-01',
    end: '2017-06-01'
  }
});

// constrain to an open-ended range
var calendar = new Calendar(calendarEl, {
  initialView: 'dayGridMonth',
  validRange: {
    start: '2017-05-01'
  }
});
```

----------------------------------------

TITLE: Initialize FullCalendar with Luxon 2 Plugin (Script Tags)
DESCRIPTION: This HTML snippet illustrates how to include Luxon, FullCalendar, and the Luxon 2 connector via CDN script tags. It then shows the basic JavaScript required to initialize FullCalendar and apply a Luxon format string when using global script includes.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/date-library/luxon2.md#_snippet_2

LANGUAGE: html
CODE:
```
<!-- luxon lib -->
<script src='https://cdn.jsdelivr.net/npm/luxon@2.3.0/build/global/luxon.min.js'></script>

<!-- fullcalendar bundle -->
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@{{ site.data.latest-releases.v5 }}/main.min.js'></script>

<!-- the luxon-to-fullcalendar connector. must go AFTER the luxon lib -->
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/luxon2@{{ site.data.latest-releases.v5 }}/main.global.min.js'></script>

<script>
  var calendar = document.getElementById('calendar')
  var calendar = new FullCalendar.Calendar(calendarEl, {
    titleFormat: 'LLLL d, yyyy' // you can now use Luxon format strings!
  })

  calendar.render()
</script>
```

----------------------------------------

TITLE: Install and Use FullCalendar Web Component via CDN
DESCRIPTION: Example of integrating FullCalendar via CDN by including necessary script tags for core, web-component, and plugins. It also shows how to use the <full-calendar /> element in HTML with a JSON options attribute and the shadow attribute for rendering.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/third-party/web-component.md#_snippet_3

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8' />
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/core@{{ site.data.latest-releases.v6 }}/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/web-component@{{ site.data.latest-releases.v6 }}/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@{{ site.data.latest-releases.v6 }}/index.global.min.js'></script>
</head>
<body>

  <full-calendar shadow options='{
    "headerToolbar": {
      "left": "prev,next today",
      "center": "title",
      "right": "dayGridMonth,dayGridWeek,dayGridDay"
    }
  }' />

</body>
</html>
```

----------------------------------------

TITLE: Initialize FullCalendar with Luxon Plugin (NPM)
DESCRIPTION: Example of initializing FullCalendar in a JavaScript project using ES modules. It imports the Calendar, Luxon, and DayGrid plugins, then creates a new calendar instance, applying a Luxon-formatted title.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/date-library/luxon.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Calendar } from '@fullcalendar/core'
import luxonPlugin from '@fullcalendar/luxon3'
import dayGridPlugin from '@fullcalendar/daygrid'

let calendar = document.getElementById('calendar')
let calendar = new Calendar(calendarEl, {
  plugins: [ luxonPlugin, dayGridPlugin ],
  titleFormat: 'LLLL d, yyyy' // you can now use Luxon format strings!
})

calendar.render()
```

----------------------------------------

TITLE: Get Resources for a FullCalendar Event in JavaScript
DESCRIPTION: Demonstrates how to initialize a FullCalendar instance with resources and events, then retrieve the resources associated with a specific event using `event.getResources()` and log their IDs. This example shows how to get resources when a single `resourceId` is used.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/event-model/Event-getResources.md#_snippet_1

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  resources: [
    { id: 'a', title: 'Resource A' },
    { id: 'b', title: 'Resource B' }
  ],
  events: [
    { id: '1', title: 'Event 1', start: '2020-06-01', resourceId: 'a' }
  ]
});

var event = calendar.getEventById('1');
var resources = event.getResources();
var resourceIds = resources.map(function(resource) { return resource.id });

console.log(resourceIds); // [ 'a' ]
```

----------------------------------------

TITLE: FullCalendar Event Class: Output Property Changes
DESCRIPTION: Details the properties of the new `Event` class instances returned by the API, highlighting differences from previous plain object structures, such as the introduction of `extendedProps` and the change of `start`/`end` to `Date` objects.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_34

LANGUAGE: APIDOC
CODE:
```
Event Class Properties:
- _id: No longer available. If a unique ID is needed, generate it and put it in the `id` property.
- groupId: All events with the same `groupId` will be dragged, resized, and mutated together.
- start: Now a `Date` object, no longer a moment object.
- end: Now a `Date` object, no longer a moment object.
- color: Removed. Access `backgroundColor` and `borderColor` instead. `color` was an alias for setting both.
- extendedProps: Previously, non-standard properties were top-level keys. Now, they are moved into this hash. It is also possible to specify an explicit `extendedProps` hash in the plain input object.
- resourceId: Removed. Use `event.getResources()[0].id` instead.
- resourceIds: Removed. Use `event.getResources().map((resource) => resource.id)` instead.
```

----------------------------------------

TITLE: Constrain FullCalendar valid range to discrete or open-ended dates
DESCRIPTION: This example demonstrates how to set a fixed `validRange` for FullCalendar, either as a discrete period with both `start` and `end` dates, or as an open-ended range using only a `start` date. Dates outside this range will be grayed out and inaccessible.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v3/date-navigation/validRange.md#_snippet_1

LANGUAGE: js
CODE:
```
// constrain to a discrete range
$('#calendar1').fullCalendar({
  defaultView: 'month',
  validRange: {
    start: '2017-05-01',
    end: '2017-06-01'
  }
});

// constrain to an open-ended range
$('#calendar2').fullCalendar({
  defaultView: 'month',
  validRange: {
    start: '2017-05-01'
  }
});
```

----------------------------------------

TITLE: Initialize FullCalendar with Global Bundle
DESCRIPTION: Shows the basic setup for initializing FullCalendar using a global JavaScript bundle, which automatically includes necessary plugins like `interaction` for callbacks such as `dateClick`.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/date-clicking-selecting/dateClick.md#_snippet_2

LANGUAGE: html
CODE:
```
<script src='fullcalendar/dist/index.global.js'></script>
<script>
...
var calendar = new FullCalendar.Calendar(calendarEl, {
  // no plugin configuration required!
});
...
</script>
```

----------------------------------------

TITLE: FullCalendar Replace Calendar Event Methods with EventSource
DESCRIPTION: Illustrates how deprecated `Calendar` methods like `refetchEventSources` and `removeEventSource` are replaced by methods on the new `EventSource` object. Provides JavaScript examples for `refetch` and `remove`.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_42

LANGUAGE: js
CODE:
```
var eventSource = calendar.getEventSourceById('a');
eventSource.refetch();
```

LANGUAGE: js
CODE:
```
var eventSource = calendar.getEventSourceById('a');
eventSource.remove();
```

----------------------------------------

TITLE: Include FullCalendar Stylesheets for ES6 Setup
DESCRIPTION: These HTML link tags are required to load the core and daygrid stylesheets for FullCalendar when using an ES6 module setup. The paths typically point to files within the `node_modules` directory after npm installation.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/vertical-resource-view/resource-daygrid-view.md#_snippet_2

LANGUAGE: html
CODE:
```
<link href='node_modules/@fullcalendar/core/main.css' rel='stylesheet' />
<link href='node_modules/@fullcalendar/daygrid/main.css' rel='stylesheet' />
```

----------------------------------------

TITLE: Install FullCalendar Vue Component
DESCRIPTION: Provides command-line instructions for installing the necessary FullCalendar packages for both Vue 2 and Vue 3 projects, including the core library and the specific Vue adapter. It also mentions installing additional FullCalendar plugins.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/third-party/vue.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save @fullcalendar/vue @fullcalendar/core
```

LANGUAGE: bash
CODE:
```
npm install --save @fullcalendar/vue3 @fullcalendar/core
```

----------------------------------------

TITLE: Install FullCalendar RRule Plugin via NPM
DESCRIPTION: Instructions to install the `@fullcalendar/rrule` package along with core FullCalendar components and a display plugin using npm.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/event-model/rrule-plugin.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npm install --save @fullcalendar/rrule @fullcalendar/core @fullcalendar/daygrid
```

----------------------------------------

TITLE: Install FullCalendar Core and TimeGrid Plugin via npm
DESCRIPTION: Instructions for installing the core FullCalendar package and the TimeGrid plugin using npm. This is the first step to integrate TimeGrid view into a project.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/timegrid-view/timegrid-view.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/timegrid
```

----------------------------------------

TITLE: Initialize FullCalendar with Free Trial License Key (JavaScript)
DESCRIPTION: This JavaScript code snippet demonstrates how to initialize a FullCalendar instance and apply the `schedulerLicenseKey` during a free trial. Setting this key hides license warnings, allowing for evaluation of the premium features. The provided key is for non-commercial, non-derivative use only.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/premium.md#_snippet_0

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives'
});
```

----------------------------------------

TITLE: Load FullCalendar Stylesheets (ES6 Setup)
DESCRIPTION: This HTML snippet shows how to link the required CSS stylesheets for FullCalendar core and the timegrid view when using an ES6 module setup. These stylesheets are typically located within the 'node_modules' directory after npm installation.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/vertical-resource-view/vertical-resource-view.md#_snippet_2

LANGUAGE: html
CODE:
```
<link href='node_modules/@fullcalendar/core/main.css' rel='stylesheet' />
<link href='node_modules/@fullcalendar/timegrid/main.css' rel='stylesheet' />
```

----------------------------------------

TITLE: FullCalendar select Callback Update
DESCRIPTION: Demonstrates the updated `select` callback signature, which now receives an `info` object. This object provides detailed information about the selected date range, including `start`, `end`, `startStr`, `endStr`, and `allDay` properties.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_55

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  select: function(info) {
    console.log(info.start.toISOString());
    console.log(info.end.toISOString());
    console.log(info.startStr + ' - ' + info.endStr);
    console.log(info.allDay);
  }
});
```

----------------------------------------

TITLE: Install FullCalendar Moment Plugin via NPM
DESCRIPTION: This snippet provides the npm command to install the `@fullcalendar/moment` package along with core FullCalendar packages like `@fullcalendar/core` and `@fullcalendar/daygrid`. It's the first step for setting up the plugin in a Node.js environment.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/date-library/moment-plugin.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save \
  @fullcalendar/moment \
  @fullcalendar/core \
  @fullcalendar/daygrid
```

----------------------------------------

TITLE: New Method: updateSize
DESCRIPTION: Introduces the new `updateSize` method, which is now responsible for readjusting the calendar's sizing.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Calendar.updateSize() method:
  - New method.
  - Purpose: Readjusts a calendar's sizing (what the `render` method used to do for size adjustments).
```

----------------------------------------

TITLE: Initialize FullCalendar with Luxon Plugin (Script Tags)
DESCRIPTION: Demonstrates how to include Luxon and FullCalendar via CDN script tags for global access. It then initializes the calendar, enabling Luxon formatting for the title without a module bundler.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/date-library/luxon.md#_snippet_2

LANGUAGE: html
CODE:
```
<!-- luxon lib -->
<script src='https://cdn.jsdelivr.net/npm/luxon@2.3.0/build/global/luxon.min.js'></script>

<!-- fullcalendar bundle -->
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@{{ site.data.latest-releases.v6 }}/index.global.min.js'></script>

<!-- the luxon-to-fullcalendar connector. must go AFTER the luxon lib -->
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/luxon3@{{ site.data.latest-releases.v6 }}/index.global.min.js'></script>

<script>
  var calendarEl = document.getElementById('calendar')
  var calendar = new FullCalendar.Calendar(calendarEl, {
    titleFormat: 'LLLL d, yyyy' // you can now use Luxon format strings!
  })

  calendar.render()
</script>
```

----------------------------------------

TITLE: API Parameter: startParam
DESCRIPTION: Documents the `startParam` GET parameter, which is automatically inserted into JSON feed URLs. It specifies the parameter's data type, default name, and describes the UNIX timestamp value it carries, representing the inclusive start of the first visible day.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v1/event-data/startParam.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
startParam:
  Description: A GET parameter of this name will be inserted into each JSON feed's URL.
  Type: String
  Default: 'start'
  Value: A UNIX timestamp denoting the start of the first visible day (inclusive).
```

----------------------------------------

TITLE: Install FullCalendar Luxon 2 Plugin via NPM
DESCRIPTION: This command installs the `@fullcalendar/luxon2` package along with core FullCalendar and the DayGrid plugin using npm. It's the first step for integrating Luxon 2 with FullCalendar in a modern JavaScript project.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/date-library/luxon2.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save @fullcalendar/luxon2 @fullcalendar/core @fullcalendar/daygrid
```

----------------------------------------

TITLE: Initialize FullCalendar with Luxon Plugin (NPM)
DESCRIPTION: Example of importing and initializing FullCalendar with the Luxon and DayGrid plugins using ES modules. It demonstrates how to apply a Luxon format string to the calendar's title.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/date-library/luxon1.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { Calendar } from '@fullcalendar/core'
import luxonPlugin from '@fullcalendar/luxon'
import dayGridPlugin from '@fullcalendar/daygrid'

let calendar = document.getElementById('calendar')
let calendar = new Calendar(calendarEl, {
  plugins: [ luxonPlugin, dayGridPlugin ],
  titleFormat: 'LLLL d, yyyy' // you can now use Luxon format strings!
})

calendar.render()
```

----------------------------------------

TITLE: Configure FullCalendar validRange with Fixed Dates
DESCRIPTION: This JavaScript example demonstrates how to set a fixed `validRange` for a FullCalendar instance. It shows two configurations: one for a discrete range with both start and end dates, and another for an open-ended range specifying only a start date. This limits user navigation and event placement within the defined period.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/date-navigation/validRange.md#_snippet_1

LANGUAGE: js
CODE:
```
// constrain to a discrete range
var calendar = new Calendar(calendarEl, {
  initialView: 'dayGridMonth',
  validRange: {
    start: '2017-05-01',
    end: '2017-06-01'
  }
});

// constrain to an open-ended range
var calendar = new Calendar(calendarEl, {
  initialView: 'dayGridMonth',
  validRange: {
    start: '2017-05-01'
  }
});
```

----------------------------------------

TITLE: FullCalendar Versioning Scheme Update
DESCRIPTION: Explanation of the new unified versioning scheme for FullCalendar and its plugins, ensuring compatibility across components.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_95

LANGUAGE: APIDOC
CODE:
```
FullCalendar Versioning Scheme:
  Previous: Core 3.x.x, Scheduler 1.x.x (incompatible).
  Current: All v4 plugins (including Scheduler) are 4.x.x. Plugins with same minor version (e.g., 4.1.x) are compatible.
```

----------------------------------------

TITLE: FullCalendar Scheduler Plugin NPM Installation Command
DESCRIPTION: Installs jQuery, Moment.js, FullCalendar, and the FullCalendar Scheduler plugin using npm. This method requires a build system like Webpack or Browserify to bundle all code for use in a browser environment.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v3/scheduler.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install jquery moment fullcalendar fullcalendar-scheduler
```

----------------------------------------

TITLE: Install FullCalendar Core and Bootstrap Plugin (npm)
DESCRIPTION: Shell command to install the necessary FullCalendar packages, including the core library and the Bootstrap plugin, for use in an ES6 build system.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v6/theming/bootstrap4.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm install --save \
  @fullcalendar/core \
  @fullcalendar/bootstrap
```

----------------------------------------

TITLE: Initialize FullCalendar with Multiple JSON Event Feeds (JavaScript)
DESCRIPTION: This JavaScript example demonstrates how to configure a FullCalendar instance to fetch events from multiple JSON feeds. The `eventSources` array is populated with the URLs of the desired feeds. This setup allows the calendar to display events from diverse data endpoints simultaneously.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/event-source/eventSources.md#_snippet_0

LANGUAGE: js
CODE:
```
var calendar = new Calendar(calendarEl, {
  eventSources: [
    '/feed1.php',
    '/feed2.php'
  ]
});
```

----------------------------------------

TITLE: FullCalendar v5 Scheduler Pre-built Bundle Usage (HTML)
DESCRIPTION: Shows how to integrate the FullCalendar v5 Scheduler using its pre-built bundle. It emphasizes that only the scheduler's main JS file is needed, as it includes standard plugins, and the 'plugins' array is not required.

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v5/upgrading-from-v4.md#_snippet_3

LANGUAGE: html
CODE:
```
<link ref='fullcalendar-scheduler/main.css' rel='stylesheet' />
<script src='fullcalendar-scheduler/main.js'></script><!-- only one JS file. don't include the other bundle -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar')
    var calendar = new FullCalendar.Calendar(calendarEl, {
      // plugins: [ 'resourceTimeline' ] // DON'T DO THIS ANYMORE!
    })
    calendar.render()
  })
</script>
```

----------------------------------------

TITLE: FullCalendar View API Changes
DESCRIPTION: Outlines modifications to FullCalendar's View API, including renamed view-specific options (`timeGrid`, `dayGrid`), changes to `View` class subclassing, and updates to the `View` object's properties (`name` to `type`, `intervalStart`/`intervalEnd` to `currentStart`/`currentEnd`, `start`/`end` to `activeStart`/`activeEnd`).

SOURCE: https://github.com/fullcalendar/fullcalendar-docs/blob/main/_docs-v4/upgrading-from-v3.md#_snippet_51

LANGUAGE: APIDOC
CODE:
```
View-specific options:
  - Old: 'agenda' and 'basic' types.
  - New: Use 'timeGrid' and 'dayGrid' respectively for view-specific options.

Custom views written in JS:
  - When subclassing the 'View' class, the methods that must be implemented have changed significantly.

View object properties:
  - name (DEPRECATED):
    - Renamed to: 'type'.
  - intervalStart / intervalEnd (DEPRECATED):
    - Renamed to: 'currentStart' / 'currentEnd'.
    - Description: Represents the current month/week/day/etc.
  - start / end (DEPRECATED):
    - Renamed to: 'activeStart' / 'activeEnd'.
    - Description: Represents the date range that can be selected and accept events.
```